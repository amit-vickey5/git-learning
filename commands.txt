git config --global user.name "Amit"
git config --global user.email "amit.vickey5@gmail.com"
git config --global core.editor "gedit -s"

LIST ALL CONFIGS :: git config [--global] --list
LIST ALL CONFIGS IN EDITOR :: git config [--global] -e

NOTE :: ALL THE COMMANDS ARE TO BE EXECUTED FROM THE CURRENT WORKING PROJECT ONLY(i.e. if working on project "GoLangLearning", the commands are to be executed from "GoLangLearning" folder)

INITIALIZE A GIT REPOSITORY FOR ANY EXISTING PROJECT :: git init

CHECK GIT STATUS :: git status

MOVING FILE TO GIT STAGING AREA :: git add <filename>
MOVE ALL FILES IN CURRENT FOLDER TO STAGING AREA :: git add .

COMMIT(INLINE MESSAGE) :: git commit -m "commit message"
MUTI-LINE COMMIT MESSAGE :: git commit

COMMITS HISTORY :: git log / git show
SIMPLIFIED COMMITS HISTORY :: git log --oneline --graph --decorate --all

LIST FILES TRACKED BY GIT :: git ls-files

MOVE UN-COMMITED FILES TO STAGING AND COMMIT :: git commit -am "Commit Message"

UN-STAGE FILES :: git reset HEAD <filename>

RESET FILE(DISCARD ALL CHANGES AND BRING BACK LAST COMMITTED STATE) :: git checkout -- <filename>

ALIAS :: git config --global alias.<COMMAND-NAME> "<ORIGINAL-COMMAND-WITHOUT-GIT>"
	e.g. git config --global alias.history "log --oneline --graph --decorate --all"

RENAMING A FILE :: git mv <old-file> <new-file>
	this will rename the file in local, and will move the change to staging area. still commit needs to happen to respresent the same in repository

DELETING A FILE :: git rm <file-name>
	this will delete the file in local, and will move the change to staging area. still commit needs to happen to respresent the same in repository

DIFFERENCE BETWEEN COMMITS(using terminal) ::
	git diff <COMMIT1> <COMMIT2>


DIFFERENCE BETWEEN COMMITS(using configured tool) ::
	git difftool <COMMIT1> <COMMIT2>

CURRENT BRANCH :: git branch

SWITCH BRANCH :: git checkout <branch-name>

CREATE A NEW BRANCH AND SWITCH TO IT :: git checkout -b <branch-name>

TO MERGE FEATURE-BRANCH TO MASTER(OR PARENT BRANCH) ::
	1. Switch to parent branch(git checkout <parent-branch>) i.e switch to the branch to which the changes are to be made
	2. Merge the changes(git merge <branch-name>)
	THIS WILL MERGE THE CHANGES FROM <branch-name> TO THE CURRENT WORKING BRANCH

DELETE A BRANCH :: git branch -d <branch-name>

// THIS LINE IS TO GENERATE CONFLICTS - <conflict-branch>
// THIS LINE IS TO GENERATE CONFLICTS - <master>

CREATE A LIGHTWEIGHT TAG :: git tag <tagname>
DELETE A TAG :: git tag -d <tagname>
LIST ALL TAGS :: git tag --list
CREATE ANNOTATED TAG(A MORE DETAILED TAG) :: git tag -a <tagname> -m "Some Message"
SHOW DETAILS OF A TAG :: git show <tagname>

STASHING CURRENT CHANGES :: git stash
LIST ALL THE STASHES :: git stash list
TO APPLY STASH CHANGES :: git stash pop
	this will apply the stash changes and delete the stash as well
// THIS LINE WILL BE STASHED


LINK GITHUB REPO TO LOCAL GIT REPO :: git remote add origin <remote-repo-url>
CHECK THE LINKED REPOTE REPO :: git remote -v

PUSH CHANGES TO GITHUB :: git push -u origin master --tags
	-u : sets a tracking-branch relationship between master branch on local repo and master branch on remote repo
	origin : name of the remote repo to which the changes will be pushed
	master : name of the branch to be pushed
	--tags : send all the tags as well

SSH :: 
	1. create .ssh folder inside /home/<username>
	2. generate ssh key :: ssh-keygen -t rsa -C "<email>"


CLONE REPOSITORY :: git clone <URL>
	by default, git will create a new folder with name same as the repository name and clone the repository inside it
	to specify the folder inside which the clone needs to happed :: git clone <URL> <folder-name>




