git config --global user.name "Amit"
git config --global user.email "amit.vickey5@gmail.com"
git config --global core.editor "gedit -s"

LIST ALL CONFIGS :: git config [--global] --list
LIST ALL CONFIGS IN EDITOR :: git config [--global] -e

NOTE :: ALL THE COMMANDS ARE TO BE EXECUTED FROM THE CURRENT WORKING PROJECT ONLY(i.e. if working on project "GoLangLearning", the commands are to be executed from "GoLangLearning" folder)

INITIALIZE A GIT REPOSITORY FOR ANY EXISTING PROJECT :: git init

CHECK GIT STATUS :: git status

MOVING FILE TO GIT STAGING AREA :: git add <filename>
MOVE ALL FILES IN CURRENT FOLDER TO STAGING AREA :: git add .

COMMIT(INLINE MESSAGE) :: git commit -m "commit message"
MUTI-LINE COMMIT MESSAGE :: git commit

COMMITS HISTORY :: git log / git show
SIMPLIFIED COMMITS HISTORY :: git log --oneline --graph --decorate --all

LIST FILES TRACKED BY GIT :: git ls-files

MOVE UN-COMMITED FILES TO STAGING AND COMMIT :: git commit -am "Commit Message"

UN-STAGE FILES :: git reset HEAD <filename>

RESET FILE(DISCARD ALL CHANGES AND BRING BACK LAST COMMITTED STATE) :: git checkout -- <filename>

ALIAS :: git config --global alias.<COMMAND-NAME> "<ORIGINAL-COMMAND-WITHOUT-GIT>"
	e.g. git config --global alias.history "log --oneline --graph --decorate --all"

RENAMING A FILE :: git mv <old-file> <new-file>
	this will rename the file in local, and will move the change to staging area. still commit needs to happen to respresent the same in repository

DELETING A FILE :: git rm <file-name>
	this will delete the file in local, and will move the change to staging area. still commit needs to happen to respresent the same in repository

DIFFERENCE BETWEEN COMMITS(using terminal) ::
	git diff <COMMIT1> <COMMIT2>


DIFFERENCE BETWEEN COMMITS(using configured tool) ::
	git difftool <COMMIT1> <COMMIT2>

CURRENT BRANCH :: git branch
